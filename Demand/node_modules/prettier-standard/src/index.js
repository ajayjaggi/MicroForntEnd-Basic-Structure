#!/usr/bin/env node
"use strict";require("regenerator-runtime/runtime");require("core-js/modules/es6.promise");function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _next(value) {step("next", value);}function _throw(err) {step("throw", err);}_next();});};}

var minimist = require('minimist');
var formatFilesFromArgv = require('./format-files');

var cliHelp = `
Usage
  $ prettier-standard [<glob>...]

Options
  --log-level  Log level to use (default: warn)

Examples
  $ prettier-standard 'src/**/*.js'
  $ echo "const {foo} = "bar";" | prettier-standard
`;

var options = {};

function help() {
  console.log(cliHelp);
  process.exit(1);
}function

main() {return _main.apply(this, arguments);}function _main() {_main = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {var flags, input;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            flags = require('minimist')(process.argv.slice(2), options);
            input = flags._;

            if (process.stdin.isTTY === true && input.length < 1) {
              help();
            }return _context.abrupt("return",

            formatFilesFromArgv(input, flags));case 4:case "end":return _context.stop();}}}, _callee, this);}));return _main.apply(this, arguments);}


main();